// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
// SECTION 1: X, ZX, & NX
// First, we manipulate x based on the value of zx.
    Mux16(a=x, b=false, sel=zx, out=outZX);

// Then, we perform a bitwise not operation, creating notZX.
    Not16(in=outZX, out=notZX);

// To manipulate x based on the value of nx, we feed outZX and notZX into another 16-bit Mux gate.
// This allows us to pass through x! or x, based on whether nx is 1 or 0, respectively.
    Mux16(a=outZX, b=notZX, sel=nx, out=outNX);

// SECTION 2: Y, ZY, & NY
// Repeat the same steps for the y variable.
    Mux16(a=y, b=false, sel=zy, out=outZY);

// Again, we'll perform a bitwise not operation to create notZY.
    Not16(in=outZY, out=notZY);

// Finally, feed outZY and notZX into another 16-bit Mux gate to manipulate y based on the value of ny.
    Mux16(a=outZY, b=notZY, sel=ny, out=outNY);

// SECTION 3: F
// In this section, we'll tackle the f flag's functionality. First, let's calculate x+y.
    Add16(a=outNX, b=outNY, out=xPlusY);

// Then, we need to calculate the bitwise operation x&y.
    And16(a=outNX, b=outNY, out=xAndY);

// Now, we'll decide which function to use - x+y or x&y - by using a Mux gate with f's value as the selector.
    Mux16(a=xAndY, b=xPlusY, sel=f, out=outF);

// SECTION 4: NO, NG, & OUT
// This penultimate section describes the final manipulation of our output value.
// When it's all said and done, we'll either receive "out!" or "out" as our final output.
// This all hinges on the value of the control bit "no", which (again) we'll use as a Mux gate selector.
// First step: Perform a 16-bitwise Not on outF.
    Not16(in=outF, out=notOutF);

// Then, our final Mux...
    Mux16(a=outF, b=notOutF, sel=no, out=out, out[15]=ng, out[0..7]=zrLow, out[8..15]=zrHigh);

// SECTION 5: ZR
// This last section takes care of the zr flag.
// This flag doesn't manipulate x or y in any way. It's set based on the value of out.
    Or8Way(in=zrLow, out=or1Out);
    Or8Way(in=zrHigh, out=or2Out);
    Or(a=or1Out, b=or2Out, out=zrOrOut);
    Not(in=zrOrOut, out=zr);

}
